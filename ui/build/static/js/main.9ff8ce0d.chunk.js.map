{"version":3,"sources":["helpers/createContact.js","helpers/EventBus.js","helpers/connect.js","components/loading.js","components/contactForm.jsx","components/contactLine.jsx","components/contactList.jsx","components/tabs.jsx","App.js","index.js"],"names":["CreateContact","firstName","lastName","phoneNum","email","isActive","_id","id","this","trim","isFormValid","obj","key","value","errorObj","message","errorFlag","test","parseInt","Event","_events","on","eventName","event","Error","emit","param","next","List","Object","create","Tab","console","log","Get","params","response","url","action","Promise","resolve","reject","xhttp","XMLHttpRequest","onreadystatechange","readyState","status","responseText","JSON","parse","open","send","Loading","flag","className","Contact","props","handleChange","bind","submitUser","close","cancel","onEdit","state","isFromValid","errorFields","readMode","loading","then","data","contact","setState","previousState","tabId","name","error","alert","type","onChange","checked","onClick","e","target","createUser","user","http","stringify","setRequestHeader","Post","undefined","catch","Update","Component","ContactLine","openContact","deleteContact","ContactList","rawList","contacts","pages","currentPage","pageSize","records","filter","getContactList","onFilter","sizeChange","listContact","prevPage","nextPage","length","map","ele","colSpan","Delete","list","sort","a","b","Date","createdAt","getTime","setPagging","totalPages","Math","ceil","i","splice","newPageNum","pagesLength","Tabs","tabList","title","content","activeTab","tabCount","addTab","removeTab","selectTab","setName","ind","find","contactId","checkOpen","openTab","tabs","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9ff8ce0d.chunk.js","sourcesContent":["/***************\r\n * contact creation Constructor To get defined fields....\r\n */\r\nexport const CreateContact = class {\r\n    constructor({ firstName, lastName, phoneNum, email, isActive, _id, id }) {\r\n        this.firstName = (firstName || \"\").trim();\r\n        this.lastName = (lastName || \"\").trim();\r\n        this.isActive = isActive || false;\r\n        this.phoneNum = phoneNum || \"\";\r\n        this.email = (email || \"\").trim();\r\n        this.id = _id || id || \"\"\r\n    }\r\n}\r\n/*************\r\n * Check Validation of the fields and provide Object with errors....\r\n */\r\nexport const isFormValid = function (obj) {\r\n    let errorObj = {}, key, value, message = { firstName: \"First Name\", lastName: \"Last Name\" }, errorFlag = false;\r\n    for (key in obj) {\r\n        switch (key) {\r\n            case 'firstName':\r\n            case 'lastName':\r\n                value = obj[key];\r\n                if (!value.trim()) {\r\n                    errorObj[key] = message[key] + ' is required';\r\n                    errorFlag = true;\r\n                } else if (!(/^([a-z ]+)$/i).test(value.trim())) {\r\n                    errorObj[key] = 'Please Enter Valid ' + message[key];\r\n                    errorFlag = true;\r\n                } else {\r\n                    errorObj[key] = \"\";\r\n                }\r\n                continue;\r\n            case 'phoneNum':\r\n                value = parseInt(obj[key]);\r\n                if (!value) {\r\n                    errorObj[key] = 'Phone Number is required';\r\n                    errorFlag = true;\r\n                } else if (!(/^(\\d{10})$/).test(value)) {\r\n                    errorObj[key] = 'Please Enter Valid phone number of 10 digits';\r\n                    errorFlag = true;\r\n                } else {\r\n                    errorObj[key] = \"\";\r\n                }\r\n                continue;\r\n            case 'email':\r\n                value = obj[key];\r\n                if (value && !(/^(\\w+@[a-z]+\\.[a-z]{2,3})$/i).test(value.trim())) {\r\n                    errorObj[key] = 'Please Enter Valid email Address';\r\n                    errorFlag = true;\r\n                } else {\r\n                    errorObj[key] = \"\";\r\n                }\r\n                continue;\r\n            default: break;\r\n        }\r\n    }\r\n    return { errorObj, errorFlag };\r\n}\r\n","/**************\r\n * Event Bus user to communicate between components in place of REDUX.\r\n * Small application Small needs.\r\n */\r\nconst Event = {\r\n    _events:{},\r\n    // registed any event REquired...\r\n    on(eventName, event) {\r\n        if (typeof event !== 'function') throw new Error(`${eventName} is not a function`);\r\n        this._events[eventName] = event;\r\n    },\r\n    // emit any registered event to that module...\r\n    emit(eventName,param,next) {\r\n        if (!this._events[eventName]) throw new Error(`${eventName} is not registered`);\r\n        this._events[eventName](param);\r\n        if (typeof next == 'function') next();\r\n    }\r\n}\r\n/*******\r\n * List module specific for List operation from out side...\r\n */\r\nconst List = Object.create(Event);\r\nList._events = {}\r\n/*******\r\n * Tab module to perform tab specific Operations....\r\n */\r\nconst Tab  = Object.create(Event);\r\nTab._events = {}\r\n\r\nconsole.log(Tab,List);\r\nexport {List,Tab};","// App XHR request are handle from here....\r\n\r\n/***********\r\n * Get request... Provide action...\r\n */\r\nexport const Get = function (params) {\r\n    var url = '/' + params.action,response;\r\n    return new Promise((resolve, reject) => {\r\n        var xhttp = new XMLHttpRequest();\r\n        xhttp.onreadystatechange = function () {\r\n            if (this.readyState == 4 && this.status == 200) {\r\n                response = xhttp.responseText||\"\";\r\n                resolve(JSON.parse(response));\r\n            }else if(this.status == 500){\r\n                reject(\"Server Not Responding\");\r\n            }\r\n        };\r\n        xhttp.open(\"GET\", url, true);\r\n        xhttp.send();\r\n    });\r\n}\r\n/********\r\n * POST request to create Object Provide action...\r\n */\r\nexport const Post = function (params) {\r\n    var url = '/'+params.action,response;\r\n    return new Promise((resolve, reject) => {\r\n        var http = new XMLHttpRequest();\r\n        var data = JSON.stringify(params.data);\r\n        http.open('POST', url, true);\r\n\r\n        //Send the proper header information along with the request\r\n        http.setRequestHeader('Content-type', 'application/json');\r\n\r\n        http.onreadystatechange = function () {//Call a function when the state changes.\r\n            if (http.readyState == 4 && http.status == 200) {\r\n                response = http.responseText||\"\"\r\n                resolve(JSON.parse(response));\r\n            }else if(this.status == 500){\r\n                reject(\"Server Not Responding\");\r\n            }\r\n        }\r\n        http.send(data);\r\n    });\r\n}\r\n/*******\r\n * DELETE request to remove object from data base...\r\n */\r\nexport const Delete = function (params) {\r\n    var url = '/'+params.action,response;\r\n    return new Promise((resolve, reject) => {\r\n        var http = new XMLHttpRequest();\r\n        var data = JSON.stringify(params.data);\r\n        http.open('DELETE', url, true);\r\n\r\n        //Send the proper header information along with the request\r\n        http.setRequestHeader('Content-type', 'application/json');\r\n\r\n        http.onreadystatechange = function () {//Call a function when the state changes.\r\n            if (http.readyState == 4 && http.status == 200) {\r\n                response = http.responseText||\"\"\r\n                resolve(JSON.parse(response));\r\n            }else if(this.status == 500){\r\n                reject(\"Server Not Responding\");\r\n            }\r\n        }\r\n        http.send(data);\r\n    });\r\n}\r\n/***********\r\n * PUT request to update any object.....\r\n */\r\nexport const Update = function (params) {\r\n    var url = '/'+params.action,response;\r\n    return new Promise((resolve, reject) => {\r\n        var http = new XMLHttpRequest();\r\n        var data = JSON.stringify(params.data);\r\n        http.open('PUT', url, true);\r\n\r\n        //Send the proper header information along with the request\r\n        http.setRequestHeader('Content-type', 'application/json');\r\n\r\n        http.onreadystatechange = function () {//Call a function when the state changes.\r\n            if (http.readyState == 4 && http.status == 200) {\r\n                response = http.responseText||\"\"\r\n                resolve(JSON.parse(response));\r\n            }else if(this.status == 500){\r\n                reject(\"Server Not Responding\");\r\n            }\r\n        }\r\n        http.send(data);\r\n    });\r\n}","import React from 'react';\r\n/**********\r\n * functional Component to show Loading....\r\n */\r\nconst Loading = function (flag) {\r\n    return (<div className=\"mask\">\r\n        <div>Loading</div>\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n    </div>)\r\n}\r\nexport default Loading;","import React, { Component } from 'react';\r\nimport { CreateContact, isFormValid } from '../helpers/createContact';\r\nimport { List, Tab } from '../helpers/EventBus';\r\nimport { Get, Post, Update } from '../helpers/connect';\r\nimport Loading from './loading';\r\n/***********\r\n * Form to create Contact.....\r\n */\r\nclass Contact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.submitUser = this.submitUser.bind(this);\r\n        this.close = this.close.bind(this);\r\n        this.cancel = this.cancel.bind(this);\r\n        this.onEdit = this.onEdit.bind(this);\r\n        this.state = {\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            email: \"\",\r\n            phoneNum: \"\",\r\n            isActive: true,\r\n            id: \"\",\r\n            isFromValid: false,\r\n            errorFields: {},\r\n            readMode: true,\r\n            loading:true\r\n        }\r\n    }\r\n    /*************\r\n     * Get Detials of the form open...\r\n     *********/\r\n    componentDidMount() {\r\n        if (this.props.id != 'new') {\r\n            let getContact = Get({\r\n                action: 'contact/' + this.props.id\r\n            });\r\n            getContact.then((data) => {\r\n                let contact = new CreateContact(data);\r\n                this.setState((previousState) => {\r\n                    return { ...contact ,loading: false}\r\n                });\r\n                Tab.emit('setName',{id:this.props.tabId,name:`Contact: ${contact.firstName}`});\r\n            },\r\n            (error)=>{\r\n                alert(error);\r\n                this.setState({loading:false})\r\n            })\r\n        } else {\r\n            this.setState({ id: 'new', readMode: false ,loading:false})\r\n        }\r\n    }\r\n    render() {\r\n        let { firstName, lastName, isActive, email, phoneNum, errorFields, readMode, id ,loading} = this.state;\r\n        if (loading) {\r\n            return <Loading></Loading>\r\n        } else {\r\n            return (<>\r\n                <form name=\"userForm\" className=\"userForm\">\r\n                    <div>\r\n                        <label><span>First Name <span className=\"mand\">*</span> :</span>\r\n                            {readMode ?\r\n                                <span>{firstName}</span> :\r\n                                <input type=\"text\" value={firstName} name=\"firstName\" onChange={this.handleChange}></input>\r\n                            }</label>\r\n                        <div className=\"error\">{errorFields['firstName']}</div>\r\n                    </div>\r\n                    <div>\r\n                        <label><span>Last Name <span className=\"mand\">*</span> :</span>\r\n                            {readMode ?\r\n                                <span>{lastName}</span> :\r\n                                <input type=\"textx\" value={lastName} name=\"lastName\" onChange={this.handleChange}></input>\r\n                            }</label>\r\n                        <div className=\"error\">{errorFields['lastName']}</div>\r\n                    </div>\r\n                    <div>\r\n                        <label><span>Email : </span>\r\n                            {readMode ?\r\n                                <span>{email}</span> :\r\n                                <input type=\"email\" value={email} name=\"email\" onChange={this.handleChange}></input>\r\n                            }</label>\r\n                        <div className=\"error\">{errorFields['email']}</div>\r\n                    </div>\r\n                    <div>\r\n                        <label><span>Phone Number <span className=\"mand\">*</span> :</span>\r\n                            {readMode ?\r\n                                <span>{phoneNum}</span> :\r\n                                <input type=\"number\" value={phoneNum} name=\"phoneNum\" onChange={this.handleChange}></input>\r\n                            }</label>\r\n                        <div className=\"error\">{errorFields['phoneNum']}</div>\r\n                    </div>\r\n                    <div>\r\n                        <label><span>Status : </span>\r\n                            {readMode ?\r\n                                <span>{isActive ? 'Active' : \"In-Active\"}</span> :\r\n                                <input type=\"checkbox\" checked={isActive} name=\"isActive\" onChange={this.handleChange}></input>\r\n                            }</label>\r\n                    </div>\r\n                </form >\r\n                <div className=\"actionButton\">\r\n                    {readMode || id == 'new' ? <button onClick={this.close}>Close</button> :\r\n                        <button onClick={this.cancel}>Cancel</button>}\r\n                    {readMode ? <button onClick={this.onEdit}>Edit</button> :\r\n                        <button type=\"submit\" onClick={this.submitUser}>Save</button>\r\n                    }\r\n                </div>\r\n            </>\r\n            )\r\n        }\r\n    }\r\n    // enabling Edit...\r\n    onEdit(event) {\r\n        this.setState(previousState => {\r\n            return { readMode: false }\r\n        })\r\n    }\r\n    //close Edit view and.....\r\n    cancel(event) {\r\n        this.setState(previousState => {\r\n            return { readMode: true }\r\n        })\r\n    }\r\n    /************\r\n     * Handle change in the input fields and inline Rule checks...\r\n     *******/\r\n    handleChange(event, e) {\r\n        var name = event.target.name,\r\n            value = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n        this.setState({ [name]: value });\r\n        this.setState(previousState => {\r\n            let { errorObj } = isFormValid({ [name]: value });\r\n            return { errorFields: { ...previousState.errorFields, ...errorObj } }\r\n        });\r\n    }\r\n    /**************\r\n     * Check validation of the contact details and request update...\r\n     ******/\r\n    submitUser(event) {\r\n        this.setState(previousState => {\r\n            let { errorObj, errorFlag } = isFormValid(this.state);\r\n            return {\r\n                errorFields: errorObj, isFromValid: !errorFlag\r\n            }\r\n        }, () => {\r\n            if (this.state.isFromValid) {\r\n                this.createUser(new CreateContact(this.state));\r\n            } else alert('Please fill the mandatory fields to proceed!!');\r\n        });\r\n    }\r\n    /********\r\n     * Close of the open tab...\r\n     * ************ */\r\n    close(event) {\r\n        Tab.emit('closeTab', { id: this.props.tabId });\r\n    }\r\n    /************ \r\n     * Server Requestes to to update and create base on Id... \r\n     * *************/\r\n    createUser(user) {\r\n        if (this.state.id == 'new') {\r\n            Post({\r\n                action: 'contact',\r\n                data: user\r\n            }).then((response) => {\r\n                alert('Contact Created');\r\n                this.setState((previousState) => {\r\n                    return { id: response._id }\r\n                }, this.cancel)\r\n                List.emit('updateList', undefined, () => {\r\n                    Tab.emit('switchTab', 'tab1');\r\n                    this.close();\r\n                });\r\n            }).catch(error => {\r\n                alert('Error While Creating', error);\r\n            })\r\n        } else {\r\n            Update({\r\n                action: 'contact/' + this.state.id,\r\n                data: user\r\n            }).then(() => {\r\n                alert('Contact Updated');\r\n                this.cancel();\r\n                List.emit('updateList');\r\n            }).catch(error => {\r\n                alert('Error While Updating', error);\r\n            })\r\n        }\r\n    }\r\n}\r\nexport default Contact;","import React, { Component } from 'react';\r\n/**************\r\n * One Row of the Contact List....\r\n */\r\nclass ContactLine extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.openContact = this.openContact.bind(this);\r\n        this.deleteContact = this.deleteContact.bind(this); \r\n    }\r\n    render() {\r\n        let { firstName,\r\n            lastName,\r\n            email,\r\n            phoneNum,\r\n            isActive } = this.props.contact;\r\n        return (\r\n            <>\r\n                <tr>\r\n                    <td>{firstName} {lastName}</td>\r\n                    <td>{email}</td>\r\n                    <td>{phoneNum}</td>\r\n                    <td>{isActive?\"Active\":\"In-Active\"}</td>\r\n                    <td>\r\n                        <button onClick={this.openContact}>Open</button>\r\n                        <button onClick={this.deleteContact}>Delete</button>\r\n                    </td>\r\n                </tr>\r\n            </>\r\n        );\r\n    }\r\n    // Open contact..\r\n    openContact(){\r\n        this.props.openContact(this.props.contact.id);\r\n    }\r\n    // delete Contact...\r\n    deleteContact(){\r\n        this.props.deleteContact(this.props.contact.id);\r\n    }\r\n}\r\n\r\nexport default ContactLine;","import React, { Component } from 'react';\r\nimport ContactLine from './contactLine';\r\nimport { Get, Delete } from '../helpers/connect';\r\nimport { CreateContact } from '../helpers/createContact';\r\nimport { List, Tab } from '../helpers/EventBus';\r\nimport Loading from './loading';\r\n\r\n/*************\r\n * Tabular List of the Contacts....\r\n */\r\nclass ContactList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            rawList: [],\r\n            contacts: [],\r\n            pages: [\"\"],\r\n            currentPage: 1,\r\n            pageSize: 5,\r\n            records: 0,\r\n            filter: 'all',\r\n            loading: true\r\n        }\r\n        List.on('updateList', this.getContactList.bind(this));\r\n        this.openContact = this.openContact.bind(this)\r\n        this.deleteContact = this.deleteContact.bind(this);\r\n        this.onFilter = this.onFilter.bind(this);\r\n        this.sizeChange = this.sizeChange.bind(this);\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Email</th>\r\n                            <th>Phone Number</th>\r\n                            <th><span>Status</span>\r\n                                <select className=\"filter\" value={this.state.filter} onChange={this.onFilter}>\r\n                                    <option value=\"all\">All</option>\r\n                                    <option value=\"active\">Active</option>\r\n                                    <option value=\"inactive\">In-Active</option>\r\n                                </select>\r\n                            </th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                        {this.listContact()}\r\n                    </tbody>\r\n                </table>\r\n                <div className=\"paggination\">\r\n                    <button onClick={this.prevPage.bind(this)}> Prev </button>\r\n                    <span>{this.state.currentPage}</span>\r\n                    <button onClick={this.nextPage.bind(this)}>Next</button>\r\n                    <span>Total Pages : {this.state.pages.length - 1}</span>\r\n                    <select value={this.state.pageSize} onChange={this.sizeChange}>\r\n                        <option value=\"5\">5</option>\r\n                        <option value=\"10\">10</option>\r\n                        <option value=\"15\">15</option>\r\n                    </select>\r\n                    <span>Total contacts : {this.state.records}</span>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n    /***********\r\n     * iteregate Over List of contact loading and No data....\r\n     */\r\n    listContact() {\r\n        if (!this.state.contacts.length) return (<tr>\r\n            <th className=\"noData\" colSpan=\"5\">{this.state.loading ? <Loading></Loading> : 'No Contact Found !!'}</th>\r\n        </tr>)\r\n        return this.state.contacts.map(ele => {\r\n            return (\r\n                <ContactLine key={ele._id} contact={ele} openContact={this.openContact} deleteContact={this.deleteContact}></ContactLine>\r\n            )\r\n        })\r\n    }\r\n    /************\r\n     * Delete Contact server request...\r\n     */\r\n    deleteContact(id) {\r\n        Delete({\r\n            action: 'contact/' + id\r\n        }).then((response) => {\r\n            alert(response.message);\r\n            this.getContactList()\r\n        },\r\n            (error) => {\r\n                alert(error);\r\n            });\r\n    }\r\n    /***********\r\n     * Open the contact tab...\r\n     */\r\n    openContact(id) {\r\n        Tab.emit('addTab', {\r\n            id\r\n        });\r\n    }\r\n    /**********\r\n     * getContact Server Request...\r\n     * sorted By create date...\r\n     */\r\n    getContactList() {\r\n        Get({\r\n            action: 'contact'\r\n        }).then(data => {\r\n            let list = data.sort((a, b) => {\r\n                return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\r\n            });\r\n            this.setState(previousState => {\r\n                return { rawList: list.map(ele => new CreateContact(ele)), loading: false }\r\n            }, this.setPagging);\r\n        }, (error) => {\r\n            alert(error);\r\n            this.setState({ loading: false });\r\n        });\r\n    }\r\n    componentDidMount() {\r\n        this.getContactList();\r\n    }\r\n    /***************\r\n     * Create Pagging basded on finlter and pageSize...\r\n     */\r\n    setPagging() {\r\n        this.setState(previousState => {\r\n            let { rawList: list, pageSize, filter } = previousState,\r\n                pages = [], totalPages, records;\r\n            list = list.filter(ele => {\r\n                switch (filter) {\r\n                    case 'all': return true\r\n                    case 'active': return ele.isActive;\r\n                    case 'inactive': return !ele.isActive\r\n                }\r\n            });\r\n            records = list.length;\r\n            totalPages = Math.ceil(list.length / pageSize);\r\n            for (let i = 1; i <= totalPages; i++) {\r\n                pages[i] = list.splice(0, pageSize);\r\n            }\r\n            return { pages, contacts: pages[1] || [], records, currentPage: 1 }\r\n        });\r\n    }\r\n    /*************\r\n     * on filtering The status of the Contacts....\r\n     */\r\n    onFilter(event) {\r\n        this.setState({ filter: event.target.value }, this.setPagging);\r\n    }\r\n    /************\r\n     * pagging to next page....\r\n     */\r\n    prevPage() {\r\n        if (this.state.currentPage == 1) return;\r\n        this.setState(previousState => {\r\n            let newPageNum = previousState.currentPage - 1;\r\n            return {\r\n                currentPage: newPageNum, contacts: previousState.pages[newPageNum]\r\n            }\r\n        })\r\n    }\r\n    /***********\r\n     * pagging to previous page....\r\n     */\r\n    nextPage() {\r\n        let pagesLength = this.state.pages.length - 1;\r\n        if (this.state.currentPage >= pagesLength) { return };\r\n        this.setState(previousState => {\r\n            let newPageNum = previousState.currentPage + 1;\r\n            return {\r\n                currentPage: newPageNum, contacts: previousState.pages[newPageNum]\r\n            }\r\n        })\r\n    }\r\n    /**********\r\n     * on change of page size....\r\n     */\r\n    sizeChange(event) {\r\n        this.setState({ pageSize: event.target.value }, this.setPagging);\r\n    }\r\n}\r\n\r\nexport default ContactList;","import React, { Component } from \"react\";\r\nimport Contact from './contactForm';\r\nimport ContactList from './contactList';\r\nimport {Tab} from '../helpers/EventBus';\r\n/***************\r\n * Tabs component To handel Tab functionality...\r\n */\r\nclass Tabs extends Component {\r\n  // by default Contact List tab seslected and not closebale...\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tabList: [\r\n        { id: \"tab1\", title: \"Contacts\", content: ContactList },\r\n      ],\r\n      activeTab: \"tab1\"\r\n    };\r\n    this.tabCount = 1;\r\n    Tab.on('addTab',this.addTab.bind(this));\r\n    Tab.on('closeTab',this.removeTab.bind(this));\r\n    Tab.on('switchTab',this.selectTab.bind(this));\r\n    Tab.on('setName',this.setName.bind(this));\r\n  }\r\n  render() {\r\n    let { activeTab } = this.state;\r\n    return (\r\n      <>\r\n        <div className=\"tabHead\">\r\n          {this.state.tabList.map((ele, ind) => {\r\n            return (\r\n              <div\r\n                key={ele.id}\r\n                className={activeTab === ele.id ? \"active \" : \"\"}\r\n                onClick={this.selectTab.bind(this, ele.id)}\r\n              >\r\n                <span className=\"tab\">\r\n                  <span>{ele.title}</span>\r\n                  {ele.close && (\r\n                    <button\r\n                      className=\"closeTab\"\r\n                      onClick={this.removeTab.bind(this, { id: ele.id })}\r\n                    >\r\n                      x\r\n                    </button>\r\n                  )}\r\n                </span>\r\n              </div>\r\n            );\r\n          })}\r\n          <button onClick={this.addTab.bind(this,{id:'new'})}>Create Contact</button>\r\n        </div>\r\n        <div className=\"tabContainer\">\r\n          {this.state.tabList.map((ele,ind) => (\r\n            <div key={ele.id} className={activeTab === ele.id ? \"active\" : \"\"}>\r\n              <ele.content {...ele.props} tabId={ele.id}></ele.content>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n  /*********\r\n   * swithc to the tab whose Id id passed...\r\n   */\r\n  selectTab(id, event) {\r\n    this.setState((previousState) => {\r\n      let isfound = previousState.tabList.find(ele => ele.id === id);\r\n      return isfound ? { activeTab: id } : {};\r\n    });\r\n  }\r\n  /**************\r\n   * add a new tab if tab is not present else switch to the existing one....\r\n   */\r\n  addTab(contactId) {  \r\n    if (!this.checkOpen(contactId.id)) {\r\n      this.tabCount++;\r\n      this.setState(previousState => {\r\n        let tabId = \"tab\" + this.tabCount,\r\n          tabs = [\r\n            ...previousState.tabList,\r\n            {\r\n              id: tabId,\r\n              title: contactId.id === 'new' ? \"New Contact\" : \"Contact\",\r\n              content: Contact,\r\n              close: true,\r\n              props: contactId\r\n            }\r\n          ];\r\n        return { tabList: tabs, activeTab: tabId };\r\n      });\r\n    }\r\n  }\r\n  /***********\r\n   * check for is the tab Open...\r\n   */\r\n  checkOpen(id) {\r\n    let open = this.state.tabList.find(ele => ele.props&& ele.props.id == id);\r\n    if (open) {\r\n      this.setState(() => {\r\n        return { activeTab: open.id }\r\n      })\r\n      return true;\r\n    }\r\n  }\r\n  /************\r\n   * closing of tab remove from list.....\r\n   */\r\n  removeTab({ id }) {\r\n    this.tabCount++;\r\n    this.setState(previousState => {\r\n      let openTab = 0,\r\n        tabs = previousState.tabList.filter((ele,ind) =>{\r\n          if(ele.id !== id){\r\n            return true;\r\n          }\r\n          openTab = ind - 1\r\n          return false;\r\n        })\r\n      return { activeTab:  previousState.tabList[openTab].id, tabList: tabs };\r\n    });\r\n  }\r\n  /************\r\n   * changing of any open tab...\r\n   */\r\n  setName({id,name}){\r\n    this.setState(previousState=>{\r\n      return {tabList : previousState.tabList.map(ele=>ele.id == id?{...ele,title:name}:ele)}\r\n    })\r\n  }\r\n}\r\n\r\nexport default Tabs;\r\n","import React from 'react';\nimport Tabs from './components/tabs';\n/*******\n * Initialization of the App..s\n */\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tabs></Tabs>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// add app to the Root element of DOM.\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}